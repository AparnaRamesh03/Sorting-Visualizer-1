{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingAlgorithms/QuickSort.js","SortingAlgorithms/SelectionSort.js","SortingAlgorithms/BubbleSort.js","SortingVisualizer/SortingVisualizer.js","SortingAlgorithms/InsertionSort.js","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","auxillaryArray","slice","mergeSort","startIndex","endIndex","middleIndex","Math","floor","sortArray","i","j","push","length","merge","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","arraysAreEqual","getQuickSortAnimations","quickSort","pivotIndex","pivot","swap","partitionArray","firstIndex","secondIndex","temp","getSelectionSortAnimations","N","minIndex","selectionSort","getBubbleSortAnimations","bubbleSort","WINDOW_WIDTH","window","innerWidth","WINDOW_HEIGHT","innerHeight","NUMBER_OF_ARRAY_BARS","parseInt","onresize","ENABLED_BUTTON","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","restoreStoreButtons","document","getElementById","disabled","buttonStyle","style","title","cursor","background","disableSortButtons","isColorChange","arrayBars","getElementsByClassName","barOneIndex","barTwoIndex","color","barOneStyle","barTwoStyle","setTimeout","backgroundColor","barOneIdx","newHeight","height","RESTORE_TIME","barIndex","barStyle","key","insertionSort","getInsertionSortAnimations","className","position","right","map","value","idx","top","onClick","id","heapSort","React","Component","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.6466d986.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    mergeSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction mergeSort(auxillaryArray, startIndex, endIndex, animations) {\r\n    if(startIndex === endIndex)\r\n        return;\r\n    const middleIndex = Math.floor((startIndex + endIndex)/2);\r\n    mergeSort(auxillaryArray, startIndex, middleIndex, animations);\r\n    mergeSort(auxillaryArray, middleIndex + 1, endIndex, animations);\r\n    merge(auxillaryArray, startIndex, middleIndex, endIndex, animations);\r\n}\r\n\r\nfunction merge(auxillaryArray, startIndex, middleIndex, endIndex, animations) {\r\n    let sortArray = [];\r\n    let i = startIndex;\r\n    let j = middleIndex + 1;\r\n    while(i <= middleIndex && j <= endIndex) {\r\n        //Comparing value at ith and jth index so push them to change their color\r\n        animations.push([i, j]);\r\n        //By changing color we imply that we are comparing those two values and then again we should revert back to their original color so push them again\r\n        animations.push([i, j]);\r\n        if(auxillaryArray[i] <= auxillaryArray[j]) {\r\n            //We should overwrite the value at (i+startIndex)th index with ith index so push them to highlight swap their heights\r\n            animations.push([sortArray.length + startIndex, auxillaryArray[i]]);\r\n            sortArray.push(auxillaryArray[i++]);\r\n        }\r\n        else {\r\n            //We should overwrite the value at (i+startIndex)th index with jth index so push them to highlight swap their heights\r\n            animations.push([sortArray.length + startIndex, auxillaryArray[j]]);\r\n            sortArray.push(auxillaryArray[j++]);\r\n        }\r\n    }\r\n    while(i <= middleIndex) {\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n        animations.push([sortArray.length + startIndex, auxillaryArray[i]]);\r\n        sortArray.push(auxillaryArray[i++]);\r\n    }\r\n    while(j <= endIndex) {\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n        animations.push([sortArray.length + startIndex, auxillaryArray[j]]);\r\n        sortArray.push(auxillaryArray[j++]);\r\n    }\r\n    for (let i = startIndex; i <= endIndex; i++) {\r\n        auxillaryArray[i] = sortArray[i - startIndex];\r\n    }\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}","export function getQuickSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\ngetQuickSortAnimations([7,2,1,6]);\r\n\r\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\r\n    let pivotIndex;\r\n    if (startIndex < endIndex) {\r\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\r\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\r\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\r\n    }\r\n}\r\n\r\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\r\n    let pivot = auxillaryArray[endIndex];\r\n    let pivotIndex = startIndex;\r\n    for (let i = startIndex; i <= endIndex - 1; i++) {\r\n        animations.push([i, endIndex]);\r\n        animations.push([i, endIndex]);\r\n        if (auxillaryArray[i] <= pivot) {\r\n            //Swap these two heights\r\n            animations.push([i, auxillaryArray[pivotIndex]]);\r\n            animations.push([pivotIndex, auxillaryArray[i]]);\r\n            swap(auxillaryArray, i , pivotIndex);\r\n            pivotIndex++;\r\n        }\r\n        else {\r\n            animations.push([-1, -1]);\r\n            animations.push([-1, -1]);\r\n        }\r\n        animations.push([-1, -1]);\r\n        animations.push([-1, -1]);\r\n    }\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n    //Swap these two heights\r\n    animations.push([pivotIndex, auxillaryArray[endIndex]]);\r\n    animations.push([endIndex, auxillaryArray[pivotIndex]]);\r\n    swap(auxillaryArray, pivotIndex, endIndex);\r\n    return pivotIndex;\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}","export function getSelectionSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    selectionSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction selectionSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for (let i = 0; i < N - 1; i++) {\r\n        let minIndex = i; //Finding minimum element in unsorted array\r\n        for (let j = i + 1; j < N; j++) {\r\n            animations.push([\"comparision1\", j, minIndex]);\r\n            animations.push([\"comparision2\", j, minIndex]);\r\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\r\n                minIndex = j;\r\n            }\r\n        }\r\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\r\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\r\n        // Swap the found minimum element with the first element\r\n        swap(auxillaryArray, minIndex, i);\r\n    }\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}","export function getBubbleSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    bubbleSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction bubbleSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for (let i = 0; i < N - 1; i++) {\r\n        for (let j = 0; j < N - i -1; j++) {\r\n            animations.push([j, j + 1]);\r\n            animations.push([j, j + 1]);\r\n            if (auxillaryArray[j] > auxillaryArray[j + 1]) {\r\n                animations.push([j, auxillaryArray[j + 1]]);\r\n                animations.push([j + 1, auxillaryArray[j]]);\r\n                swap(auxillaryArray, j, j + 1);\r\n            }\r\n            else {\r\n                animations.push([-1, -1]);\r\n                animations.push([-1, -1]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}","import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport {getMergeSortAnimations} from '../SortingAlgorithms/MergeSort';\r\nimport {getHeapSortAnimations} from '../SortingAlgorithms/HeapSort';\r\nimport {getQuickSortAnimations} from '../SortingAlgorithms/QuickSort';\r\nimport {getInsertionSortAnimations} from '../SortingAlgorithms/InsertionSort';\r\nimport {getSelectionSortAnimations} from '../SortingAlgorithms/SelectionSort';\r\nimport {getBubbleSortAnimations} from '../SortingAlgorithms/BubbleSort';\r\n//Changing width,height accordingly with the browser\r\nlet WINDOW_WIDTH = window.innerWidth;\r\nlet WINDOW_HEIGHT = window.innerHeight;\r\nlet NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 200)/8);\r\n\r\nfunction reportWindowSize() {\r\n    WINDOW_WIDTH =  window.innerWidth;\r\n    WINDOW_HEIGHT = window.innerHeight;\r\n    NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 200)/8);\r\n}\r\nwindow.onresize = reportWindowSize; //TBD -> find a way to update state also when resized\r\n\r\n\r\nconst PRIMARY_COLOR = 'turquoise'; //Normal color of bars\r\nconst SECONDARY_COLOR = 'red'; //Color of bars when they are being compared\r\nconst ANIMATION_SPEED_MS = 10; //Animation Speed (how fast color changes, how fast height gets overwritten)\r\n\r\n//Tooltips for buttons\r\nconst DISABLED_BUTTON = \"Currently Disabled\"\r\nconst ENABLED_BUTTON = {\r\n    nlogn: \"O(NlogN) Time Complexity\",\r\n    nSquare: \"O(N^2) Time Complexity\"\r\n}\r\n\r\nclass SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: []\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n    //Generates new random array \r\n    resetArray() {\r\n        const array = []\r\n        for (let i = 0;i < NUMBER_OF_ARRAY_BARS;i++) {\r\n            array.push(randomIntFromInterval(25,WINDOW_HEIGHT-30));\r\n        }\r\n        this.setState({array: array});\r\n        this.restoreStoreButtons();\r\n    }\r\n    disableSortButtons() {\r\n        document.getElementById(\"mergeSort\").disabled = true;\r\n        let buttonStyle = document.getElementById(\"mergeSort\").style;\r\n        document.getElementById(\"mergeSort\").title = DISABLED_BUTTON;\r\n        buttonStyle.cursor = \"default\";\r\n        buttonStyle.background = \"#000000\";\r\n\r\n        document.getElementById(\"quickSort\").disabled = true;\r\n        buttonStyle = document.getElementById(\"quickSort\").style;\r\n        document.getElementById(\"quickSort\").title = DISABLED_BUTTON;\r\n        buttonStyle.cursor = \"default\";\r\n        buttonStyle.background = \"#000000\";\r\n\r\n        document.getElementById(\"insertionSort\").disabled = true;\r\n        buttonStyle = document.getElementById(\"insertionSort\").style;\r\n        document.getElementById(\"insertionSort\").title = DISABLED_BUTTON;\r\n        buttonStyle.cursor = \"default\";\r\n        buttonStyle.background = \"#000000\";\r\n\r\n        document.getElementById(\"heapSort\").disabled = true;\r\n        buttonStyle = document.getElementById(\"heapSort\").style;\r\n        document.getElementById(\"heapSort\").title = DISABLED_BUTTON;\r\n        buttonStyle.cursor = \"default\";\r\n        buttonStyle.background = \"#000000\";\r\n\r\n        document.getElementById(\"selectionSort\").disabled = true;\r\n        buttonStyle = document.getElementById(\"selectionSort\").style;\r\n        document.getElementById(\"selectionSort\").title = DISABLED_BUTTON;\r\n        buttonStyle.cursor = \"default\";\r\n        buttonStyle.background = \"#000000\";\r\n\r\n        document.getElementById(\"bubbleSort\").disabled = true;\r\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\r\n        document.getElementById(\"bubbleSort\").title = DISABLED_BUTTON;\r\n        buttonStyle.cursor = \"default\";\r\n        buttonStyle.background = \"#000000\";\r\n    }\r\n    restoreStoreButtons() {\r\n        document.getElementById(\"mergeSort\").disabled = false;\r\n        let buttonStyle = document.getElementById(\"mergeSort\").style;\r\n        document.getElementById(\"mergeSort\").title = ENABLED_BUTTON.nlogn;\r\n        buttonStyle.background = \"#47535E\";\r\n        buttonStyle.cursor = \"pointer\";\r\n\r\n        document.getElementById(\"quickSort\").disabled = false;\r\n        buttonStyle = document.getElementById(\"quickSort\").style;\r\n        document.getElementById(\"quickSort\").title = ENABLED_BUTTON.nSquare;\r\n        buttonStyle.background = \"#47535E\";\r\n        buttonStyle.cursor = \"pointer\";\r\n\r\n        document.getElementById(\"bubbleSort\").disabled = false;\r\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\r\n        document.getElementById(\"bubbleSort\").title = ENABLED_BUTTON.nSquare;\r\n        buttonStyle.background = \"#47535E\";\r\n        buttonStyle.cursor = \"pointer\";\r\n\r\n        document.getElementById(\"selectionSort\").disabled = false;\r\n        buttonStyle = document.getElementById(\"selectionSort\").style;\r\n        document.getElementById(\"selectionSort\").title = ENABLED_BUTTON.nSquare;\r\n        buttonStyle.background = \"#47535E\";\r\n        buttonStyle.cursor = \"pointer\";\r\n\r\n        document.getElementById(\"insertionSort\").disabled = false;\r\n        buttonStyle = document.getElementById(\"insertionSort\").style;\r\n        document.getElementById(\"insertionSort\").title = ENABLED_BUTTON.nSquare;\r\n        buttonStyle.background = \"#47535E\";\r\n        buttonStyle.cursor = \"pointer\";\r\n\r\n        document.getElementById(\"heapSort\").disabled = false;\r\n        buttonStyle = document.getElementById(\"heapSort\").style;\r\n        document.getElementById(\"heapSort\").title = ENABLED_BUTTON.nlogn;\r\n        buttonStyle.background = \"#47535E\";\r\n        buttonStyle.cursor = \"pointer\";\r\n    }\r\n    //Sorting Algorithms\r\n    mergeSort() {\r\n        this.disableSortButtons();\r\n        const [animations,sortArray] = getMergeSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = (i % 3 !== 2);\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const [barOneIndex, barTwoIndex] = animations[i];\r\n                const color = (i % 3 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                //If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n                \r\n            }\r\n            else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                  },i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n        // this.setState({array: sortArray})\r\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\r\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \r\n    }\r\n    quickSort() {\r\n        this.disableSortButtons();\r\n        const [animations,sortArray] = getQuickSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length - 1; i++) {\r\n            const isColorChange = (i % 6 === 0) || (i % 6 === 1);\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [barOneIndex, barTwoIndex] = animations[i];\r\n                if(barOneIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [barIndex, newHeight] = animations[i];\r\n                if (barIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * ANIMATION_SPEED_MS);  \r\n            }\r\n        }\r\n        // this.setState({array: sortArray})\r\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\r\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);  \r\n    }\r\n    bubbleSort() {\r\n        this.disableSortButtons();\r\n        const [animations,sortArray] = getBubbleSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = (i % 4 === 0) || (i % 4 === 1);\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const color = (i % 4 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [barIndex, newHeight] = animations[i];\r\n                if (barIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * ANIMATION_SPEED_MS);  \r\n            }\r\n        }\r\n        // this.setState({array: sortArray})\r\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\r\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);  \r\n    }\r\n    insertionSort() {\r\n        this.disableSortButtons();\r\n        const [animations,sortArray] = getInsertionSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [temp, barIndex, newHeight] = animations[i];\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * ANIMATION_SPEED_MS);  \r\n            }\r\n        }\r\n        // this.setState({array: sortArray})\r\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\r\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \r\n    }\r\n    selectionSort() {\r\n        this.disableSortButtons();\r\n        const [animations,sortArray] = getSelectionSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [temp, barIndex, newHeight] = animations[i];\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * ANIMATION_SPEED_MS);  \r\n            }\r\n        }\r\n        // this.setState({array: sortArray})\r\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\r\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \r\n    }\r\n    render() {\r\n        const array = this.state.array;\r\n        const SORT_BUTTONS = 6;\r\n        const TOTAL_BUTTONS = 1 + SORT_BUTTONS;\r\n        return(\r\n            <>\r\n            <div className=\"array-container\" style={{position:'absolute', right:`20px`}}>\r\n                {array.map((value, idx) => (\r\n                    <div\r\n                        className=\"array-bar\"\r\n                        key={idx}\r\n                        style={{\r\n                        backgroundColor: PRIMARY_COLOR,\r\n                        height: `${value}px`\r\n                        }}\r\n                    ></div>\r\n                ))}\r\n            </div>\r\n            <div className=\"buttons\" > \r\n                <button title=\"Generates a new random array\" style={{position:'relative',top:`${0*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.resetArray()}>\r\n                    Generate New Array\r\n                </button>\r\n                <button title=\"O(NlogN) Time Complexity\" id = \"mergeSort\" style={{position:'relative',top:`${0.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.mergeSort()}>\r\n                    Merge Sort\r\n                </button>\r\n                <button title=\"O(N^2) Time Complexity\" id = \"quickSort\" style={{position:'relative',top:`${1.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.quickSort()}>\r\n                    Quick Sort\r\n                </button>\r\n                <button title=\"O(N^2) Time Complexity\" id = \"bubbleSort\" style={{position:'relative',top:`${2.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.bubbleSort()}>\r\n                    Bubble Sort\r\n                </button>\r\n                <button title=\"O(N^2) Time Complexity\" id = \"insertionSort\" style={{position:'relative',top:`${3.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.insertionSort()}>\r\n                    Insertion Sort\r\n                </button>\r\n                <button title=\"O(NlogN) Time Complexity\" id = \"heapSort\" style={{position:'relative',top:`${4.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.heapSort()}>\r\n                    Heap Sort\r\n                </button>\r\n                <button title=\"O(N^2) Time Complexity\" id = \"selectionSort\" style={{position:'relative',top:`${5.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.selectionSort()}>\r\n                    Selection Sort\r\n                </button>\r\n            </div>    \r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default SortingVisualizer;\r\n\r\n\r\n","export function getInsertionSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    insertionSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction insertionSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for (let i = 1; i < N; i++) {\r\n        let key = auxillaryArray[i];\r\n        let j = i - 1;\r\n        animations.push([\"comparision1\", j, i]);\r\n        animations.push([\"comparision2\", j, i]);\r\n        while(j >= 0 && auxillaryArray[j] > key) {\r\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\r\n            auxillaryArray[j + 1] = auxillaryArray[j];\r\n            j = j - 1;\r\n            if(j >= 0) {\r\n                animations.push([\"comparision1\", j, i]);\r\n                animations.push([\"comparision2\", j, i]);\r\n            }     \r\n        }\r\n        animations.push([\"overwrite\", j + 1, key]);\r\n        auxillaryArray[j + 1] = key;\r\n    }\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}","import React from 'react';\r\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer'\r\nimport './App.css'\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <SortingVisualizer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById(\"root\")\r\n);"],"sourceRoot":""}